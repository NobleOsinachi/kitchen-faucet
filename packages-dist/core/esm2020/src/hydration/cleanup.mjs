/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { first } from 'rxjs/operators';
import { retrieveViewsFromApplicationRef } from '../application_ref';
import { CONTAINER_HEADER_OFFSET, DEHYDRATED_VIEWS } from '../render3/interfaces/container';
import { isLContainer } from '../render3/interfaces/type_checks';
import { HEADER_OFFSET, HOST, TVIEW } from '../render3/interfaces/view';
import { LAZY, NUM_ROOT_NODES } from './interfaces';
import { getComponentLView } from './utils';
export function cleanupDehydratedViews(appRef) {
    // Wait once an app becomes stable and cleanup all views that
    // were not claimed during the application bootstrap process.
    return appRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => {
        const viewRefs = retrieveViewsFromApplicationRef(appRef);
        for (const viewRef of viewRefs) {
            const lView = getComponentLView(viewRef);
            // TODO: make sure that this lView represents
            // a component instance.
            const hostElement = lView[HOST];
            if (hostElement) {
                cleanupLView(lView);
                ngDevMode && ngDevMode.postHydrationCleanupRuns++;
            }
        }
    });
}
/**
 * Checks whether a given node exists and if it's annotated with a lazy attribute.
 */
function isNodeAnnotatedAsLazy(node) {
    // TODO: this method should not be needed, we keep it for testing purposes only.
    return !!node &&
        (node.nodeType === Node.ELEMENT_NODE && node.hasAttribute('lazy'));
}
function cleanupLContainer(lContainer) {
    // TODO: should we consider logging a warning here for cases
    // where there is something to cleanup, i.e. there was a delta
    // between a server and a client?
    if (lContainer[DEHYDRATED_VIEWS]) {
        const retainedViews = [];
        for (const view of lContainer[DEHYDRATED_VIEWS]) {
            if (view.data[LAZY] || isNodeAnnotatedAsLazy(view.firstChild)) {
                retainedViews.push(view);
                ngDevMode && ngDevMode.postHydrationRetainedViews++;
            }
            else {
                removeDehydratedView(view);
                ngDevMode && ngDevMode.postHydrationCleanedViews++;
            }
        }
        lContainer[DEHYDRATED_VIEWS] = retainedViews.length > 0 ? retainedViews : null;
    }
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        const childView = lContainer[i];
        cleanupLView(childView);
    }
}
function cleanupLView(lView) {
    const tView = lView[TVIEW];
    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
        if (isLContainer(lView[i])) {
            const lContainer = lView[i];
            cleanupLContainer(lContainer);
        }
        else if (Array.isArray(lView[i])) {
            // This is a component, enter the `cleanupLView` recursively.
            cleanupLView(lView[i]);
        }
    }
}
/**
 * Helper function to remove all nodes from a dehydrated view.
 */
function removeDehydratedView(dehydratedView) {
    let nodesRemoved = 0;
    let currentRNode = dehydratedView.firstChild;
    if (currentRNode) {
        const numNodes = dehydratedView.data[NUM_ROOT_NODES];
        while (nodesRemoved < numNodes) {
            const nextSibling = currentRNode.nextSibling;
            currentRNode.remove();
            currentRNode = nextSibling;
            nodesRemoved++;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,