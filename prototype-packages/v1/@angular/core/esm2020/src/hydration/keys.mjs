/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { HEADER_OFFSET, HYDRATION_KEY } from '../render3/interfaces/view';
const VIEW_SEPARATOR = ':';
const ELEMENT_SEPARATOR = '|';
const PATCHED_HYDRATION_KEY = '__ngh__';
/**
 * Generates a string that represents a key that is used during the hydration
 * to find a reference to a particular DOM element.
 */
function getHydrationKey(lView, instructionIndex, separator) {
    return `${lView[HYDRATION_KEY]}${separator}${instructionIndex}`;
}
export function getElementHydrationKey(lView, elementId) {
    return getHydrationKey(lView, elementId, ELEMENT_SEPARATOR);
}
export function getViewHydrationKey(lView, viewLocation) {
    return getHydrationKey(lView, viewLocation, VIEW_SEPARATOR);
}
/**
 * Constructs a hydration key for a view within a ViewContainerRef.
 */
export function getViewContainerHydrationKey(hostLView, hostTNode, viewIndex) {
    const elementIndex = hostTNode.index - HEADER_OFFSET;
    // Keep a view id within the same segment (between `:` symbols)
    // of the hydration key, i.e. `r0:1+0:9`.
    const key = elementIndex + '+' + viewIndex;
    return getViewHydrationKey(hostLView, key);
}
/**
 * Special case for a comment node that is inserted as a marker for a view container:
 * this node needs to have an id that is different from the host node itself,
 * so that it's uniquely identified in a generated HTML during server side rendering.
 */
export function getViewContainerMarkerHydrationKey(hostLView, hostTNode) {
    return getElementHydrationKey(hostLView, `vcr${hostTNode.index - HEADER_OFFSET}`);
}
/**
 * Monkey-patches extra info needed for hydration onto a native element.
 */
export function patchHydrationKey(native, hydrationKey) {
    native[PATCHED_HYDRATION_KEY] = hydrationKey;
}
/**
 * Reads monkey-patched hydration key from a native element.
 */
export function readPatchedHydrationKey(native) {
    return native[PATCHED_HYDRATION_KEY] ?? null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2h5ZHJhdGlvbi9rZXlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxhQUFhLEVBQUUsYUFBYSxFQUFRLE1BQU0sNEJBQTRCLENBQUM7QUFFL0UsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDO0FBQzNCLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDO0FBRTlCLE1BQU0scUJBQXFCLEdBQUcsU0FBUyxDQUFDO0FBRXhDOzs7R0FHRztBQUNILFNBQVMsZUFBZSxDQUNwQixLQUFxQixFQUFFLGdCQUErQixFQUFFLFNBQWlCO0lBQzNFLE9BQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsU0FBUyxHQUFHLGdCQUFnQixFQUFFLENBQUM7QUFDbEUsQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxLQUFxQixFQUFFLFNBQXdCO0lBQ3BGLE9BQU8sZUFBZSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEtBQXFCLEVBQUUsWUFBMkI7SUFDcEYsT0FBTyxlQUFlLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsNEJBQTRCLENBQ3hDLFNBQWdCLEVBQUUsU0FBZ0IsRUFBRSxTQUFpQjtJQUN2RCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQztJQUNyRCwrREFBK0Q7SUFDL0QseUNBQXlDO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLFlBQVksR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDO0lBQzNDLE9BQU8sbUJBQW1CLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGtDQUFrQyxDQUFDLFNBQWdCLEVBQUUsU0FBZ0I7SUFDbkYsT0FBTyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxHQUFHLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLE1BQVcsRUFBRSxZQUFvQjtJQUNoRSxNQUFjLENBQUMscUJBQXFCLENBQUMsR0FBRyxZQUFZLENBQUM7QUFDeEQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUFDLE1BQVc7SUFDakQsT0FBUSxNQUFjLENBQUMscUJBQXFCLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1ROb2RlfSBmcm9tICcuLi9yZW5kZXIzL2ludGVyZmFjZXMvbm9kZSc7XG5pbXBvcnQge0hFQURFUl9PRkZTRVQsIEhZRFJBVElPTl9LRVksIExWaWV3fSBmcm9tICcuLi9yZW5kZXIzL2ludGVyZmFjZXMvdmlldyc7XG5cbmNvbnN0IFZJRVdfU0VQQVJBVE9SID0gJzonO1xuY29uc3QgRUxFTUVOVF9TRVBBUkFUT1IgPSAnfCc7XG5cbmNvbnN0IFBBVENIRURfSFlEUkFUSU9OX0tFWSA9ICdfX25naF9fJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIGEga2V5IHRoYXQgaXMgdXNlZCBkdXJpbmcgdGhlIGh5ZHJhdGlvblxuICogdG8gZmluZCBhIHJlZmVyZW5jZSB0byBhIHBhcnRpY3VsYXIgRE9NIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEh5ZHJhdGlvbktleShcbiAgICBsVmlldzogTFZpZXc8dW5rbm93bj4sIGluc3RydWN0aW9uSW5kZXg6IG51bWJlcnxzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2xWaWV3W0hZRFJBVElPTl9LRVldfSR7c2VwYXJhdG9yfSR7aW5zdHJ1Y3Rpb25JbmRleH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudEh5ZHJhdGlvbktleShsVmlldzogTFZpZXc8dW5rbm93bj4sIGVsZW1lbnRJZDogbnVtYmVyfHN0cmluZykge1xuICByZXR1cm4gZ2V0SHlkcmF0aW9uS2V5KGxWaWV3LCBlbGVtZW50SWQsIEVMRU1FTlRfU0VQQVJBVE9SKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpZXdIeWRyYXRpb25LZXkobFZpZXc6IExWaWV3PHVua25vd24+LCB2aWV3TG9jYXRpb246IG51bWJlcnxzdHJpbmcpIHtcbiAgcmV0dXJuIGdldEh5ZHJhdGlvbktleShsVmlldywgdmlld0xvY2F0aW9uLCBWSUVXX1NFUEFSQVRPUik7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIGh5ZHJhdGlvbiBrZXkgZm9yIGEgdmlldyB3aXRoaW4gYSBWaWV3Q29udGFpbmVyUmVmLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld0NvbnRhaW5lckh5ZHJhdGlvbktleShcbiAgICBob3N0TFZpZXc6IExWaWV3LCBob3N0VE5vZGU6IFROb2RlLCB2aWV3SW5kZXg6IG51bWJlcikge1xuICBjb25zdCBlbGVtZW50SW5kZXggPSBob3N0VE5vZGUuaW5kZXggLSBIRUFERVJfT0ZGU0VUO1xuICAvLyBLZWVwIGEgdmlldyBpZCB3aXRoaW4gdGhlIHNhbWUgc2VnbWVudCAoYmV0d2VlbiBgOmAgc3ltYm9scylcbiAgLy8gb2YgdGhlIGh5ZHJhdGlvbiBrZXksIGkuZS4gYHIwOjErMDo5YC5cbiAgY29uc3Qga2V5ID0gZWxlbWVudEluZGV4ICsgJysnICsgdmlld0luZGV4O1xuICByZXR1cm4gZ2V0Vmlld0h5ZHJhdGlvbktleShob3N0TFZpZXcsIGtleSk7XG59XG5cbi8qKlxuICogU3BlY2lhbCBjYXNlIGZvciBhIGNvbW1lbnQgbm9kZSB0aGF0IGlzIGluc2VydGVkIGFzIGEgbWFya2VyIGZvciBhIHZpZXcgY29udGFpbmVyOlxuICogdGhpcyBub2RlIG5lZWRzIHRvIGhhdmUgYW4gaWQgdGhhdCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgaG9zdCBub2RlIGl0c2VsZixcbiAqIHNvIHRoYXQgaXQncyB1bmlxdWVseSBpZGVudGlmaWVkIGluIGEgZ2VuZXJhdGVkIEhUTUwgZHVyaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZpZXdDb250YWluZXJNYXJrZXJIeWRyYXRpb25LZXkoaG9zdExWaWV3OiBMVmlldywgaG9zdFROb2RlOiBUTm9kZSk6IHN0cmluZyB7XG4gIHJldHVybiBnZXRFbGVtZW50SHlkcmF0aW9uS2V5KGhvc3RMVmlldywgYHZjciR7aG9zdFROb2RlLmluZGV4IC0gSEVBREVSX09GRlNFVH1gKTtcbn1cblxuLyoqXG4gKiBNb25rZXktcGF0Y2hlcyBleHRyYSBpbmZvIG5lZWRlZCBmb3IgaHlkcmF0aW9uIG9udG8gYSBuYXRpdmUgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoSHlkcmF0aW9uS2V5KG5hdGl2ZTogYW55LCBoeWRyYXRpb25LZXk6IHN0cmluZykge1xuICAobmF0aXZlIGFzIGFueSlbUEFUQ0hFRF9IWURSQVRJT05fS0VZXSA9IGh5ZHJhdGlvbktleTtcbn1cblxuLyoqXG4gKiBSZWFkcyBtb25rZXktcGF0Y2hlZCBoeWRyYXRpb24ga2V5IGZyb20gYSBuYXRpdmUgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRQYXRjaGVkSHlkcmF0aW9uS2V5KG5hdGl2ZTogYW55KTogc3RyaW5nfG51bGwge1xuICByZXR1cm4gKG5hdGl2ZSBhcyBhbnkpW1BBVENIRURfSFlEUkFUSU9OX0tFWV0gPz8gbnVsbDtcbn1cbiJdfQ==